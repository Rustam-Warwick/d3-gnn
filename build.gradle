plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = 'org.apache.flink.gnn'
version = '1.0'
mainClassName = 'helpers.Main'
description = """GNN Plugin for apache Flink"""

ext {
    javaVersion = '11'
    flinkVersion = '1.18.1'
    scalaBinaryVersion = '_2.12'
    slf4jVersion = '1.7.32'
    log4jVersion = '2.17.1'
}

sourceCompatibility = "11"
targetCompatibility = "11"

applicationDefaultJvmArgs = ["-ea", "-Dlog4j.configurationFile=log4j.properties"]

// declare where to find the dependencies of your project
repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }

}


tasks.getByName("compileJava"){
    options.encoding = "UTF-8"
}

sourceSets{
    lib{
        java{

        }
    }
    main{
        java{
            compileClasspath = sourceSets.lib.output + compileClasspath
            runtimeClasspath = sourceSets.lib.output + runtimeClasspath
        }
    }
    test{
        java{
            compileClasspath = sourceSets.lib.output + compileClasspath
            runtimeClasspath = sourceSets.lib.output + runtimeClasspath
        }
    }
}

configurations{
    libImplementation.extendsFrom(libApi)
    implementation.extendsFrom(libImplementation)
    runtimeOnly.extendsFrom(libRuntimeOnly)
    annotationProcessor.extendsFrom(libAnnotationProcessor)
}

dependencies{

    libImplementation 'org.jetbrains:annotations:23.0.0'
    libImplementation "org.apache.flink:flink-clients:${flinkVersion}"
    libImplementation "org.apache.flink:flink-statebackend-rocksdb:${flinkVersion}"
    libImplementation "org.apache.flink:flink-connector-files:${flinkVersion}"
    libImplementation "org.apache.flink:flink-table-common:${flinkVersion}"

    libRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    libRuntimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    libRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    libAnnotationProcessor 'info.picocli:picocli-codegen:4.7.0'

    libApi 'info.picocli:picocli:4.7.0'
    libApi('ai.djl:api:0.21.0'){exclude group: 'org.slf4j'}
    libApi('ai.djl.pytorch:pytorch-engine:0.21.0') {exclude group: 'org.slf4j'}
    libApi "org.jctools:jctools-core:4.0.1" // More concurrent data structures
    libApi 'com.github.ben-manes.caffeine:caffeine:3.1.5' // Cache
    libApi 'it.unimi.dsi:fastutil:8.5.12' // Small data structures
    libApi group: 'com.clearspring.analytics', name: 'stream', version: '2.9.8'

    libApi 'com.esotericsoftware:reflectasm:1.11.9' // Reflection and constructors fast
    testImplementation "org.apache.flink:flink-test-utils:1.16.0"

}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"] // Using annotation processor for CMD args Parser
}

task libShadowJar(type: ShadowJar){
    // Other Shadow Task that prepares all the library dependencies
    configurations =  [project.configurations.libApi]
    from sourceSets.lib.output
    dependencies {
        exclude(dependency('org.apache.flink:force-shading'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
        exclude(dependency('org.slf4j:'))
        exclude(dependency('org.apache.logging.log4j:'))
    }
    archiveAppendix.set('lib')
    mergeServiceFiles()
}

shadowJar{
    configurations = []
    archiveClassifier.set("")
}

task bothJars{
    dependsOn(libShadowJar, shadowJar)
}

test{
    jvmArgs applicationDefaultJvmArgs
    useJUnitPlatform()
}